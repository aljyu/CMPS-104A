Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_PARAMLIST
   TOK_PROTOTYPE
   TOK_FUNCTION
   TOK_DECLID
   TOK_INDEX
   TOK_NEWSTRING
   TOK_RETURNVOID
   TOK_VARDECL
   '%'


State 17 conflicts: 1 shift/reduce
State 86 conflicts: 13 shift/reduce
State 109 conflicts: 13 shift/reduce
State 128 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    9          | TOK_STRUCT TOK_IDENT statements '}'

   10 statements: '{' fielddecl ';'
   11           | statements fielddecl ';'

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT
   13          | basetype TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_BOOL
   16         | TOK_CHAR
   17         | TOK_INT
   18         | TOK_STRING
   19         | TOK_IDENT

   20 function: identdecl '(' ')' ';'
   21         | identdecl '(' ')' block
   22         | identdecl params ')' ';'
   23         | identdecl params ')' block

   24 params: '(' identdecl
   25       | params ',' identdecl

   26 identdecl: basetype TOK_ARRAY TOK_IDENT
   27          | basetype TOK_IDENT

   28 block: '{' '}'
   29      | body '}'

   30 body: '{' statement
   31     | body statement

   32 statement: block
   33          | vardecl
   34          | while
   35          | ifelse
   36          | return
   37          | expr ';'
   38          | ';'

   39 vardecl: identdecl '=' expr ';'

   40 while: TOK_WHILE '(' expr ')' statement

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   42       | TOK_IF '(' expr ')' statement

   43 return: TOK_RETURN ';'
   44       | TOK_RETURN expr ';'

   45 expr: expr binop expr
   46     | unop expr
   47     | allocator
   48     | call
   49     | '(' expr ')'
   50     | variable
   51     | constant

   52 binop: TOK_EQ
   53      | TOK_NE
   54      | TOK_LT
   55      | TOK_LE
   56      | TOK_GT
   57      | TOK_GE
   58      | '+'
   59      | '-'
   60      | '*'
   61      | '/'
   62      | '='

   63 unop: TOK_POS
   64     | TOK_NEG
   65     | '!'
   66     | TOK_NEW
   67     | TOK_ORD
   68     | TOK_CHR

   69 allocator: TOK_NEW TOK_IDENT '(' ')'
   70          | TOK_NEW TOK_STRING '(' expr ')'
   71          | TOK_NEW basetype '[' expr ']'

   72 call: TOK_IDENT '(' ')'
   73     | exprs ')'

   74 exprs: TOK_IDENT '(' expr
   75      | exprs ',' expr

   76 variable: TOK_IDENT
   77         | expr '[' expr ']'
   78         | expr '.' TOK_IDENT

   79 constant: TOK_INTCON
   80         | TOK_CHARCON
   81         | TOK_STRINGCON
   82         | TOK_FALSE
   83         | TOK_TRUE
   84         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 65
'%' (37)
'(' (40) 20 21 24 40 41 42 49 69 70 72 74
')' (41) 20 21 22 23 40 41 42 49 69 70 72 73
'*' (42) 60
'+' (43) 58
',' (44) 25 75
'-' (45) 59
'.' (46) 78
'/' (47) 61
';' (59) 6 10 11 20 22 37 38 39 43 44
'=' (61) 39 62
'[' (91) 71 77
']' (93) 71 77
'{' (123) 8 10 28 30
'}' (125) 5 8 9 28 29
error (256) 5 6
TOK_VOID (258) 14
TOK_BOOL (259) 15
TOK_CHAR (260) 16
TOK_INT (261) 17
TOK_STRING (262) 18 70
TOK_IF (263) 41 42
TOK_ELSE (264) 41
TOK_WHILE (265) 40
TOK_RETURN (266) 43 44
TOK_STRUCT (267) 8 9
TOK_FALSE (268) 82
TOK_TRUE (269) 83
TOK_NULL (270) 84
TOK_NEW (271) 66 69 70 71
TOK_ARRAY (272) 12 26
TOK_EQ (273) 52
TOK_NE (274) 53
TOK_LT (275) 54
TOK_LE (276) 55
TOK_GT (277) 56
TOK_GE (278) 57
TOK_IDENT (279) 8 9 12 13 19 26 27 69 72 74 76 78
TOK_INTCON (280) 79
TOK_CHARCON (281) 80
TOK_STRINGCON (282) 81
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287) 63
TOK_NEG (288) 64
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292) 67
TOK_CHR (293) 68
TOK_ROOT (294)
TOK_PARAMLIST (295)
TOK_PROTOTYPE (296)
TOK_FUNCTION (297)
TOK_DECLID (298)
TOK_INDEX (299)
TOK_NEWSTRING (300)
TOK_RETURNVOID (301)
TOK_VARDECL (302)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
start (65)
    on left: 1, on right: 0
program (66)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (67)
    on left: 8 9, on right: 2
statements (68)
    on left: 10 11, on right: 9 11
fielddecl (69)
    on left: 12 13, on right: 10 11
basetype (70)
    on left: 14 15 16 17 18 19, on right: 12 13 26 27 71
function (71)
    on left: 20 21 22 23, on right: 3
params (72)
    on left: 24 25, on right: 22 23 25
identdecl (73)
    on left: 26 27, on right: 20 21 22 23 24 25 39
block (74)
    on left: 28 29, on right: 21 23 32
body (75)
    on left: 30 31, on right: 29 31
statement (76)
    on left: 32 33 34 35 36 37 38, on right: 4 30 31 40 41 42
vardecl (77)
    on left: 39, on right: 33
while (78)
    on left: 40, on right: 34
ifelse (79)
    on left: 41 42, on right: 35
return (80)
    on left: 43 44, on right: 36
expr (81)
    on left: 45 46 47 48 49 50 51, on right: 37 39 40 41 42 44 45 46
    49 70 71 74 75 77 78
binop (82)
    on left: 52 53 54 55 56 57 58 59 60 61 62, on right: 45
unop (83)
    on left: 63 64 65 66 67 68, on right: 46
allocator (84)
    on left: 69 70 71, on right: 47
call (85)
    on left: 72 73, on right: 48
exprs (86)
    on left: 74 75, on right: 73 75
variable (87)
    on left: 76 77 78, on right: 50
constant (88)
    on left: 79 80 81 82 83 84, on right: 51


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef  go to state 30
    basetype   go to state 31
    function   go to state 32
    identdecl  go to state 33
    block      go to state 34
    body       go to state 35
    statement  go to state 36
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 48
    ';'  shift, and go to state 49


State 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 6

   15 basetype: TOK_BOOL .

    $default  reduce using rule 15 (basetype)


State 7

   16 basetype: TOK_CHAR .

    $default  reduce using rule 16 (basetype)


State 8

   17 basetype: TOK_INT .

    $default  reduce using rule 17 (basetype)


State 9

   18 basetype: TOK_STRING .

    $default  reduce using rule 18 (basetype)


State 10

   41 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   42       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 50


State 11

   40 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 51


State 12

   43 return: TOK_RETURN . ';'
   44       | TOK_RETURN . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 53

    expr       go to state 54
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 13

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    9          | TOK_STRUCT . TOK_IDENT statements '}'

    TOK_IDENT  shift, and go to state 55


State 14

   82 constant: TOK_FALSE .

    $default  reduce using rule 82 (constant)


State 15

   83 constant: TOK_TRUE .

    $default  reduce using rule 83 (constant)


State 16

   84 constant: TOK_NULL .

    $default  reduce using rule 84 (constant)


State 17

   66 unop: TOK_NEW .
   69 allocator: TOK_NEW . TOK_IDENT '(' ')'
   70          | TOK_NEW . TOK_STRING '(' expr ')'
   71          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 56
    TOK_IDENT   shift, and go to state 57

    TOK_IDENT  [reduce using rule 66 (unop)]
    $default   reduce using rule 66 (unop)

    basetype  go to state 58


State 18

   19 basetype: TOK_IDENT .
   72 call: TOK_IDENT . '(' ')'
   74 exprs: TOK_IDENT . '(' expr
   76 variable: TOK_IDENT .

    '('  shift, and go to state 59

    TOK_ARRAY  reduce using rule 19 (basetype)
    TOK_IDENT  reduce using rule 19 (basetype)
    $default   reduce using rule 76 (variable)


State 19

   79 constant: TOK_INTCON .

    $default  reduce using rule 79 (constant)


State 20

   80 constant: TOK_CHARCON .

    $default  reduce using rule 80 (constant)


State 21

   81 constant: TOK_STRINGCON .

    $default  reduce using rule 81 (constant)


State 22

   63 unop: TOK_POS .

    $default  reduce using rule 63 (unop)


State 23

   64 unop: TOK_NEG .

    $default  reduce using rule 64 (unop)


State 24

   67 unop: TOK_ORD .

    $default  reduce using rule 67 (unop)


State 25

   68 unop: TOK_CHR .

    $default  reduce using rule 68 (unop)


State 26

   65 unop: '!' .

    $default  reduce using rule 65 (unop)


State 27

   49 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 60
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 28

   38 statement: ';' .

    $default  reduce using rule 38 (statement)


State 29

   28 block: '{' . '}'
   30 body: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 61
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 62
    block      go to state 34
    body       go to state 35
    statement  go to state 63
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 31

   26 identdecl: basetype . TOK_ARRAY TOK_IDENT
   27          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 64
    TOK_IDENT  shift, and go to state 65


State 32

    3 program: program function .

    $default  reduce using rule 3 (program)


State 33

   20 function: identdecl . '(' ')' ';'
   21         | identdecl . '(' ')' block
   22         | identdecl . params ')' ';'
   23         | identdecl . params ')' block
   39 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 66
    '('  shift, and go to state 67

    params  go to state 68


State 34

   32 statement: block .

    $default  reduce using rule 32 (statement)


State 35

   29 block: body . '}'
   31 body: body . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 69
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 62
    block      go to state 34
    body       go to state 35
    statement  go to state 70
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 36

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 37

   33 statement: vardecl .

    $default  reduce using rule 33 (statement)


State 38

   34 statement: while .

    $default  reduce using rule 34 (statement)


State 39

   35 statement: ifelse .

    $default  reduce using rule 35 (statement)


State 40

   36 statement: return .

    $default  reduce using rule 36 (statement)


State 41

   37 statement: expr . ';'
   45 expr: expr . binop expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83
    ';'     shift, and go to state 84

    binop  go to state 85


State 42

   46 expr: unop . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 86
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 43

   47 expr: allocator .

    $default  reduce using rule 47 (expr)


State 44

   48 expr: call .

    $default  reduce using rule 48 (expr)


State 45

   73 call: exprs . ')'
   75 exprs: exprs . ',' expr

    ')'  shift, and go to state 87
    ','  shift, and go to state 88


State 46

   50 expr: variable .

    $default  reduce using rule 50 (expr)


State 47

   51 expr: constant .

    $default  reduce using rule 51 (expr)


State 48

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 49

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 50

   41 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   42       | TOK_IF '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 89
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 51

   40 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 90
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 52

   72 call: TOK_IDENT . '(' ')'
   74 exprs: TOK_IDENT . '(' expr
   76 variable: TOK_IDENT .

    '('  shift, and go to state 59

    $default  reduce using rule 76 (variable)


State 53

   43 return: TOK_RETURN ';' .

    $default  reduce using rule 43 (return)


State 54

   44 return: TOK_RETURN expr . ';'
   45 expr: expr . binop expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83
    ';'     shift, and go to state 91

    binop  go to state 85


State 55

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    9          | TOK_STRUCT TOK_IDENT . statements '}'

    '{'  shift, and go to state 92

    statements  go to state 93


State 56

   18 basetype: TOK_STRING .
   70 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 94

    $default  reduce using rule 18 (basetype)


State 57

   19 basetype: TOK_IDENT .
   69 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 95

    $default  reduce using rule 19 (basetype)


State 58

   71 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 96


State 59

   72 call: TOK_IDENT '(' . ')'
   74 exprs: TOK_IDENT '(' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ')'            shift, and go to state 97

    expr       go to state 98
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 60

   45 expr: expr . binop expr
   49     | '(' expr . ')'
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83
    ')'     shift, and go to state 99

    binop  go to state 85


State 61

   28 block: '{' '}' .

    $default  reduce using rule 28 (block)


State 62

   39 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 66


State 63

   30 body: '{' statement .

    $default  reduce using rule 30 (body)


State 64

   26 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 100


State 65

   27 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 27 (identdecl)


State 66

   39 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 101
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 67

   20 function: identdecl '(' . ')' ';'
   21         | identdecl '(' . ')' block
   24 params: '(' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 102
    ')'         shift, and go to state 103

    basetype   go to state 31
    identdecl  go to state 104


State 68

   22 function: identdecl params . ')' ';'
   23         | identdecl params . ')' block
   25 params: params . ',' identdecl

    ')'  shift, and go to state 105
    ','  shift, and go to state 106


State 69

   29 block: body '}' .

    $default  reduce using rule 29 (block)


State 70

   31 body: body statement .

    $default  reduce using rule 31 (body)


State 71

   52 binop: TOK_EQ .

    $default  reduce using rule 52 (binop)


State 72

   53 binop: TOK_NE .

    $default  reduce using rule 53 (binop)


State 73

   54 binop: TOK_LT .

    $default  reduce using rule 54 (binop)


State 74

   55 binop: TOK_LE .

    $default  reduce using rule 55 (binop)


State 75

   56 binop: TOK_GT .

    $default  reduce using rule 56 (binop)


State 76

   57 binop: TOK_GE .

    $default  reduce using rule 57 (binop)


State 77

   62 binop: '=' .

    $default  reduce using rule 62 (binop)


State 78

   58 binop: '+' .

    $default  reduce using rule 58 (binop)


State 79

   59 binop: '-' .

    $default  reduce using rule 59 (binop)


State 80

   60 binop: '*' .

    $default  reduce using rule 60 (binop)


State 81

   61 binop: '/' .

    $default  reduce using rule 61 (binop)


State 82

   77 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 107
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 83

   78 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 108


State 84

   37 statement: expr ';' .

    $default  reduce using rule 37 (statement)


State 85

   45 expr: expr binop . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 109
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 86

   45 expr: expr . binop expr
   46     | unop expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83

    TOK_EQ    [reduce using rule 46 (expr)]
    TOK_NE    [reduce using rule 46 (expr)]
    TOK_LT    [reduce using rule 46 (expr)]
    TOK_LE    [reduce using rule 46 (expr)]
    TOK_GT    [reduce using rule 46 (expr)]
    TOK_GE    [reduce using rule 46 (expr)]
    '='       [reduce using rule 46 (expr)]
    '+'       [reduce using rule 46 (expr)]
    '-'       [reduce using rule 46 (expr)]
    '*'       [reduce using rule 46 (expr)]
    '/'       [reduce using rule 46 (expr)]
    '['       [reduce using rule 46 (expr)]
    '.'       [reduce using rule 46 (expr)]
    $default  reduce using rule 46 (expr)

    binop  go to state 85


State 87

   73 call: exprs ')' .

    $default  reduce using rule 73 (call)


State 88

   75 exprs: exprs ',' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 110
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 89

   41 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   42       | TOK_IF '(' expr . ')' statement
   45 expr: expr . binop expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83
    ')'     shift, and go to state 111

    binop  go to state 85


State 90

   40 while: TOK_WHILE '(' expr . ')' statement
   45 expr: expr . binop expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83
    ')'     shift, and go to state 112

    binop  go to state 85


State 91

   44 return: TOK_RETURN expr ';' .

    $default  reduce using rule 44 (return)


State 92

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
   10 statements: '{' . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 102
    '}'         shift, and go to state 113

    fielddecl  go to state 114
    basetype   go to state 115


State 93

    9 structdef: TOK_STRUCT TOK_IDENT statements . '}'
   11 statements: statements . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 102
    '}'         shift, and go to state 116

    fielddecl  go to state 117
    basetype   go to state 115


State 94

   70 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 118
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 95

   69 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 119


State 96

   71 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 120
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 97

   72 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 72 (call)


State 98

   45 expr: expr . binop expr
   74 exprs: TOK_IDENT '(' expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83

    $default  reduce using rule 74 (exprs)

    binop  go to state 85


State 99

   49 expr: '(' expr ')' .

    $default  reduce using rule 49 (expr)


State 100

   26 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


State 101

   39 vardecl: identdecl '=' expr . ';'
   45 expr: expr . binop expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83
    ';'     shift, and go to state 121

    binop  go to state 85


State 102

   19 basetype: TOK_IDENT .

    $default  reduce using rule 19 (basetype)


State 103

   20 function: identdecl '(' ')' . ';'
   21         | identdecl '(' ')' . block

    ';'  shift, and go to state 122
    '{'  shift, and go to state 29

    block  go to state 123
    body   go to state 35


State 104

   24 params: '(' identdecl .

    $default  reduce using rule 24 (params)


State 105

   22 function: identdecl params ')' . ';'
   23         | identdecl params ')' . block

    ';'  shift, and go to state 124
    '{'  shift, and go to state 29

    block  go to state 125
    body   go to state 35


State 106

   25 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 102

    basetype   go to state 31
    identdecl  go to state 126


State 107

   45 expr: expr . binop expr
   77 variable: expr . '[' expr ']'
   77         | expr '[' expr . ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83
    ']'     shift, and go to state 127

    binop  go to state 85


State 108

   78 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 78 (variable)


State 109

   45 expr: expr . binop expr
   45     | expr binop expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83

    TOK_EQ    [reduce using rule 45 (expr)]
    TOK_NE    [reduce using rule 45 (expr)]
    TOK_LT    [reduce using rule 45 (expr)]
    TOK_LE    [reduce using rule 45 (expr)]
    TOK_GT    [reduce using rule 45 (expr)]
    TOK_GE    [reduce using rule 45 (expr)]
    '='       [reduce using rule 45 (expr)]
    '+'       [reduce using rule 45 (expr)]
    '-'       [reduce using rule 45 (expr)]
    '*'       [reduce using rule 45 (expr)]
    '/'       [reduce using rule 45 (expr)]
    '['       [reduce using rule 45 (expr)]
    '.'       [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)

    binop  go to state 85


State 110

   45 expr: expr . binop expr
   75 exprs: exprs ',' expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83

    $default  reduce using rule 75 (exprs)

    binop  go to state 85


State 111

   41 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   42       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 62
    block      go to state 34
    body       go to state 35
    statement  go to state 128
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 112

   40 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 62
    block      go to state 34
    body       go to state 35
    statement  go to state 129
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 113

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 8 (structdef)


State 114

   10 statements: '{' fielddecl . ';'

    ';'  shift, and go to state 130


State 115

   12 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   13          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 131
    TOK_IDENT  shift, and go to state 132


State 116

    9 structdef: TOK_STRUCT TOK_IDENT statements '}' .

    $default  reduce using rule 9 (structdef)


State 117

   11 statements: statements fielddecl . ';'

    ';'  shift, and go to state 133


State 118

   45 expr: expr . binop expr
   70 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83
    ')'     shift, and go to state 134

    binop  go to state 85


State 119

   69 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 69 (allocator)


State 120

   45 expr: expr . binop expr
   71 allocator: TOK_NEW basetype '[' expr . ']'
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '='     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '['     shift, and go to state 82
    '.'     shift, and go to state 83
    ']'     shift, and go to state 135

    binop  go to state 85


State 121

   39 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 39 (vardecl)


State 122

   20 function: identdecl '(' ')' ';' .

    $default  reduce using rule 20 (function)


State 123

   21 function: identdecl '(' ')' block .

    $default  reduce using rule 21 (function)


State 124

   22 function: identdecl params ')' ';' .

    $default  reduce using rule 22 (function)


State 125

   23 function: identdecl params ')' block .

    $default  reduce using rule 23 (function)


State 126

   25 params: params ',' identdecl .

    $default  reduce using rule 25 (params)


State 127

   77 variable: expr '[' expr ']' .

    $default  reduce using rule 77 (variable)


State 128

   41 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   42       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 136

    TOK_ELSE  [reduce using rule 42 (ifelse)]
    $default  reduce using rule 42 (ifelse)


State 129

   40 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 40 (while)


State 130

   10 statements: '{' fielddecl ';' .

    $default  reduce using rule 10 (statements)


State 131

   12 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 137


State 132

   13 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 133

   11 statements: statements fielddecl ';' .

    $default  reduce using rule 11 (statements)


State 134

   70 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 70 (allocator)


State 135

   71 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 71 (allocator)


State 136

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_POS        shift, and go to state 22
    TOK_NEG        shift, and go to state 23
    TOK_ORD        shift, and go to state 24
    TOK_CHR        shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 62
    block      go to state 34
    body       go to state 35
    statement  go to state 138
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    unop       go to state 42
    allocator  go to state 43
    call       go to state 44
    exprs      go to state 45
    variable   go to state 46
    constant   go to state 47


State 137

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 138

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 41 (ifelse)
